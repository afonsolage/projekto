use projekto_core::{
    chunk::{self, Chunk, ChunkStorage},
    voxel::{self, Kind},
};

use crate::light;

use super::noise::Noise;

/// Generates a new chunk filling it with [`ChunkKind`] randomly generated by seeded noise
pub fn generate_chunk(noise: &Noise, chunk: Chunk, chunk_kind: &mut ChunkStorage<voxel::Kind>) {
    let world = chunk::to_world(chunk);

    for x in 0..chunk::X_AXIS_SIZE {
        for z in 0..chunk::Z_AXIS_SIZE {
            let end = noise.stone(world.x + x as f32, world.z + z as f32);
            for y in 0..end {
                chunk_kind.set((x as i32, y, z as i32).into(), Kind::id(3));
            }
        }
    }

    chunk_kind.pack();
}

pub fn init_light(
    _chunk: Chunk,
    chunk_kind: &ChunkStorage<voxel::Kind>,
    chunk_light: &mut ChunkStorage<voxel::Light>,
) {
    // Set sun light on top voxels
    chunk::top_voxels()
        .filter(|&voxel| !chunk_kind.get(voxel).is_opaque())
        .for_each(|voxel| {
            chunk_light.set_type(
                voxel,
                voxel::LightTy::Natural,
                voxel::Light::MAX_NATURAL_INTENSITY,
            );
        });

    chunk_light.pack();

    let _neighbor_propagation = light::propagate(
        chunk_kind,
        chunk_light,
        voxel::LightTy::Natural,
        chunk::top_voxels(),
    );

    // TODO: Emit light propagation events
}
